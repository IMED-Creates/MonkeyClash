#if UNITY_EDITOR
using System.Linq;
using UnityEditor;
using UnityEditor.SceneManagement;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;
using TowerArena.Abilities;
using TowerArena.Cards;
using TowerArena.Decks;
using TowerArena.Match;
using TowerArena.UI;

namespace TowerArena.EditorTools
{
    public static class ExampleSceneAutoCreator
    {
        private const string SceneName = "AutoGeneratedMatchScene";
        private const string ExampleRoot = "Assets/ExampleContent";

        [MenuItem("TowerArena/Create Example Scene (Auto)")]
        public static void CreateExampleScene()
        {
            if (!EnsureExampleAssets(out var assets))
            {
                EditorUtility.DisplayDialog(
                    "Example Content Missing",
                    "Run TowerArena -> Build Example Content first so the ExampleContent assets exist.",
                    "Got it");
                return;
            }

            EditorSceneManager.NewScene(NewSceneSetup.EmptyScene, NewSceneMode.Single);
            var scene = EditorSceneManager.GetActiveScene();
            scene.name = SceneName;

            CreateCameraAndLight();

            var root = new GameObject("MatchRoot");
            var matchManager = root.AddComponent<MatchManager>();
            var deckManager = root.AddComponent<DeckManager>();

            WireDeckManager(deckManager, assets, matchManager);
            WireMatchManager(matchManager, deckManager, assets);

            CreateLanes(matchManager, root.transform);
            CreateSpawnRoots(matchManager, root.transform);

            var uiRoot = CreateCanvasRoot(out _);
            CreateEventSystem();

            CreateMatchHud(uiRoot.transform, deckManager, matchManager);
            CreateDeckBuilder(uiRoot.transform, assets.DefenderDeck);
            CreatePostMatchSummary(uiRoot.transform, matchManager);

            EditorUtility.DisplayDialog("Scene Ready",
                "Scene created. Press Play to run the prototype.\n\n" +
                "Feel free to save the scene (Ctrl/Cmd+S).",
                "Nice");
        }

        private static void CreateCameraAndLight()
        {
            var camera = new GameObject("Main Camera");
            camera.tag = "MainCamera";
            var cam = camera.AddComponent<Camera>();
            cam.clearFlags = CameraClearFlags.Skybox;
            camera.transform.position = new Vector3(0f, 12f, -12f);
            camera.transform.rotation = Quaternion.Euler(35f, 0f, 0f);

            var light = new GameObject("Directional Light");
            var dir = light.AddComponent<Light>();
            dir.type = LightType.Directional;
            light.transform.rotation = Quaternion.Euler(50f, -30f, 0f);
        }

        private static void WireDeckManager(DeckManager deckManager, ExampleAssets assets, MatchManager matchManager)
        {
            var so = new SerializedObject(deckManager);
            so.FindProperty("matchManager").objectReferenceValue = matchManager;
            so.FindProperty("defenderDeck").objectReferenceValue = assets.DefenderDeck;
            so.FindProperty("attackerDeck").objectReferenceValue = assets.AttackerDeck;
            so.ApplyModifiedPropertiesWithoutUndo();
        }

        private static void WireMatchManager(MatchManager matchManager, DeckManager deckManager, ExampleAssets assets)
        {
            var so = new SerializedObject(matchManager);
            so.FindProperty("matchSettings").objectReferenceValue = assets.MatchSettings;
            var wavesProp = so.FindProperty("waves");
            wavesProp.arraySize = assets.Waves.Length;
            for (int i = 0; i < assets.Waves.Length; i++)
            {
                wavesProp.GetArrayElementAtIndex(i).objectReferenceValue = assets.Waves[i];
            }

            so.FindProperty("deckManager").objectReferenceValue = deckManager;
            so.FindProperty("abilityCatalog").objectReferenceValue = assets.AbilityCatalog;
            so.ApplyModifiedPropertiesWithoutUndo();
        }

        private static void CreateLanes(MatchManager matchManager, Transform parent)
        {
            var so = new SerializedObject(matchManager);
            var lanesProp = so.FindProperty("lanes");
            lanesProp.arraySize = 2;

            for (int laneIndex = 0; laneIndex < 2; laneIndex++)
            {
                var laneRoot = new GameObject($"Lane_{laneIndex}");
                laneRoot.transform.SetParent(parent, false);

                var points = new Transform[4];
                for (int i = 0; i < points.Length; i++)
                {
                    var point = new GameObject($"Point_{i}");
                    point.transform.SetParent(laneRoot.transform, false);
                    point.transform.position = new Vector3(laneIndex * 4f - 2f, 0f, i * 6f);
                    points[i] = point.transform;
                }

                var laneElement = lanesProp.GetArrayElementAtIndex(laneIndex);
                laneElement.FindPropertyRelative("id").stringValue = $"lane_{laneIndex}";
                var pointsProp = laneElement.FindPropertyRelative("pathPoints");
                pointsProp.arraySize = points.Length;
                for (int i = 0; i < points.Length; i++)
                {
                    pointsProp.GetArrayElementAtIndex(i).objectReferenceValue = points[i];
                }
            }

            so.ApplyModifiedPropertiesWithoutUndo();
        }

        private static void CreateSpawnRoots(MatchManager matchManager, Transform parent)
        {
            var defenderRoot = new GameObject("DefenderSpawnRoot").transform;
            defenderRoot.SetParent(parent, false);
            defenderRoot.position = new Vector3(-4f, 0f, -2f);

            var attackerRoot = new GameObject("AttackerSpawnRoot").transform;
            attackerRoot.SetParent(parent, false);
            attackerRoot.position = new Vector3(4f, 0f, -2f);

            var unitContainer = new GameObject("UnitContainer").transform;
            unitContainer.SetParent(parent, false);

            var balloonContainer = new GameObject("BalloonContainer").transform;
            balloonContainer.SetParent(parent, false);

            var projectileContainer = new GameObject("ProjectileContainer").transform;
            projectileContainer.SetParent(parent, false);

            var so = new SerializedObject(matchManager);
            so.FindProperty("defenderSpawnRoot").objectReferenceValue = defenderRoot;
            so.FindProperty("attackerSpawnRoot").objectReferenceValue = attackerRoot;
            so.FindProperty("unitContainer").objectReferenceValue = unitContainer;
            so.FindProperty("balloonContainer").objectReferenceValue = balloonContainer;
            so.FindProperty("projectileContainer").objectReferenceValue = projectileContainer;
            so.ApplyModifiedPropertiesWithoutUndo();
        }

        private static GameObject CreateCanvasRoot(out Canvas canvas)
        {
            var canvasGO = new GameObject("ExampleCanvas");
            canvasGO.layer = LayerMask.NameToLayer("UI");

            canvas = canvasGO.AddComponent<Canvas>();
            canvas.renderMode = RenderMode.ScreenSpaceOverlay;
            canvasGO.AddComponent<CanvasScaler>().uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
            canvasGO.AddComponent<GraphicRaycaster>();

            return canvasGO;
        }

        private static void CreateEventSystem()
        {
            if (Object.FindObjectOfType<EventSystem>() != null)
            {
                return;
            }

            var es = new GameObject("EventSystem");
            es.AddComponent<EventSystem>();
            es.AddComponent<StandaloneInputModule>();
        }

        private static void CreateMatchHud(Transform canvas, DeckManager deckManager, MatchManager matchManager)
        {
            var hudRoot = new GameObject("MatchHUD");
            var rect = hudRoot.AddComponent<RectTransform>();
            rect.SetParent(canvas, false);
            rect.anchorMin = Vector2.zero;
            rect.anchorMax = Vector2.one;
            rect.offsetMin = Vector2.zero;
            rect.offsetMax = Vector2.zero;

            var hud = hudRoot.AddComponent<MatchHUD>();

            var handContainer = CreateUiPanel("HandContainer", rect, new Vector2(0.1f, 0f), new Vector2(0.9f, 0.25f));
            var abilityContainer = CreateUiPanel("AbilityContainer", rect, new Vector2(0.75f, 0.25f), new Vector2(0.95f, 0.55f));

            var infoPanel = CreateUiPanel("InfoPanel", rect, new Vector2(0.05f, 0.75f), new Vector2(0.35f, 0.95f));
            var elixirText = CreateText("ElixirText", infoPanel, "Elixir: 0/0");
            var currencyText = CreateText("CurrencyText", infoPanel, "Gold: 0");
            var waveText = CreateText("TimeText", infoPanel, "Time: 0");
            var endpointText = CreateText("EndpointText", infoPanel, "Endpoint HP: 0/0");

            var cardTemplate = CreateCardViewTemplate(rect);
            var abilityTemplate = CreateAbilityButtonTemplate(rect);

            var so = new SerializedObject(hud);
            so.FindProperty("deckManager").objectReferenceValue = deckManager;
            so.FindProperty("matchManager").objectReferenceValue = matchManager;
            so.FindProperty("handContainer").objectReferenceValue = handContainer;
            so.FindProperty("cardViewPrefab").objectReferenceValue = cardTemplate;
            so.FindProperty("elixirText").objectReferenceValue = elixirText;
            so.FindProperty("currencyText").objectReferenceValue = currencyText;
            so.FindProperty("waveText").objectReferenceValue = waveText;
            so.FindProperty("endpointText").objectReferenceValue = endpointText;
            so.FindProperty("abilityContainer").objectReferenceValue = abilityContainer;
            so.FindProperty("abilityButtonPrefab").objectReferenceValue = abilityTemplate;
            so.ApplyModifiedPropertiesWithoutUndo();
        }

        private static void CreateDeckBuilder(Transform canvas, DeckDefinition deck)
        {
            var builderRoot = new GameObject("DeckBuilderUI");
            var rect = builderRoot.AddComponent<RectTransform>();
            rect.SetParent(canvas, false);
            rect.anchorMin = new Vector2(0.65f, 0.55f);
            rect.anchorMax = new Vector2(0.95f, 0.95f);
            rect.offsetMin = Vector2.zero;
            rect.offsetMax = Vector2.zero;

            var panel = builderRoot.AddComponent<Image>();
            panel.color = new Color(0f, 0f, 0f, 0.35f);

            var title = CreateText("DeckTitle", rect, "Deck");
            title.alignment = TextAnchor.UpperCenter;
            title.rectTransform.anchorMin = new Vector2(0f, 0.8f);
            title.rectTransform.anchorMax = Vector2.one;
            title.rectTransform.offsetMin = Vector2.zero;
            title.rectTransform.offsetMax = Vector2.zero;

            var count = CreateText("DeckCount", rect, "Cards: 0");
            count.alignment = TextAnchor.UpperCenter;
            count.rectTransform.anchorMin = new Vector2(0f, 0.7f);
            count.rectTransform.anchorMax = new Vector2(1f, 0.8f);
            count.rectTransform.offsetMin = Vector2.zero;
            count.rectTransform.offsetMax = Vector2.zero;

            var listPanel = CreateUiPanel("CardList", rect, new Vector2(0.05f, 0.05f), new Vector2(0.95f, 0.65f));
            var layout = listPanel.gameObject.AddComponent<VerticalLayoutGroup>();
            layout.childControlHeight = true;
            layout.childForceExpandHeight = false;
            layout.childForceExpandWidth = true;
            layout.spacing = 8f;

            var builder = builderRoot.AddComponent<DeckBuilderUI>();

            var so = new SerializedObject(builder);
            so.FindProperty("deck").objectReferenceValue = deck;
            so.FindProperty("cardListContainer").objectReferenceValue = listPanel;
            so.FindProperty("cardViewPrefab").objectReferenceValue = CreateCardViewTemplate(rect);
            so.FindProperty("deckTitle").objectReferenceValue = title;
            so.FindProperty("deckCount").objectReferenceValue = count;
            so.ApplyModifiedPropertiesWithoutUndo();
        }

        private static void CreatePostMatchSummary(Transform canvas, MatchManager matchManager)
        {
            var summaryRoot = new GameObject("PostMatchSummaryUI");
            var rect = summaryRoot.AddComponent<RectTransform>();
            rect.SetParent(canvas, false);
            rect.anchorMin = new Vector2(0.35f, 0.35f);
            rect.anchorMax = new Vector2(0.65f, 0.65f);
            rect.offsetMin = Vector2.zero;
            rect.offsetMax = Vector2.zero;

            var background = summaryRoot.AddComponent<Image>();
            background.color = new Color(0f, 0f, 0f, 0.65f);

            var title = CreateText("ResultText", rect, "Winner");
            title.alignment = TextAnchor.MiddleCenter;
            title.rectTransform.anchorMin = new Vector2(0.1f, 0.6f);
            title.rectTransform.anchorMax = new Vector2(0.9f, 0.9f);

            var stats = CreateText("StatsText", rect, "Duration: 0");
            stats.alignment = TextAnchor.MiddleCenter;
            stats.rectTransform.anchorMin = new Vector2(0.1f, 0.15f);
            stats.rectTransform.anchorMax = new Vector2(0.9f, 0.6f);

            var summary = summaryRoot.AddComponent<PostMatchSummaryUI>();
            var so = new SerializedObject(summary);
            so.FindProperty("root").objectReferenceValue = summaryRoot;
            so.FindProperty("resultText").objectReferenceValue = title;
            so.FindProperty("statsText").objectReferenceValue = stats;
            so.ApplyModifiedPropertiesWithoutUndo();

            var matchSO = new SerializedObject(matchManager);
            matchSO.FindProperty("postMatchSummary").objectReferenceValue = summary;
            matchSO.ApplyModifiedPropertiesWithoutUndo();

            summary.Hide();
        }

        private static Transform CreateUiPanel(string name, RectTransform parent, Vector2 anchorMin, Vector2 anchorMax)
        {
            var panelGO = new GameObject(name);
            var rect = panelGO.AddComponent<RectTransform>();
            rect.SetParent(parent, false);
            rect.anchorMin = anchorMin;
            rect.anchorMax = anchorMax;
            rect.offsetMin = Vector2.zero;
            rect.offsetMax = Vector2.zero;

            var image = panelGO.AddComponent<Image>();
            image.color = new Color(0f, 0f, 0f, 0.35f);

            return rect;
        }

        private static Text CreateText(string name, RectTransform parent, string text)
        {
            var go = new GameObject(name);
            var rect = go.AddComponent<RectTransform>();
            rect.SetParent(parent, false);
            rect.anchorMin = Vector2.zero;
            rect.anchorMax = Vector2.one;
            rect.offsetMin = Vector2.zero;
            rect.offsetMax = Vector2.zero;

            var label = go.AddComponent<Text>();
            label.text = text;
            label.font = Resources.GetBuiltinResource<Font>("Arial.ttf");
            label.color = Color.white;
            label.alignment = TextAnchor.MiddleLeft;
            label.supportRichText = true;
            return label;
        }

        private static CardView CreateCardViewTemplate(Transform parent)
        {
            var root = new GameObject("CardViewTemplate");
            var rect = root.AddComponent<RectTransform>();
            rect.SetParent(parent, false);
            rect.sizeDelta = new Vector2(160f, 200f);
            root.SetActive(false);

            var background = root.AddComponent<Image>();
            background.color = new Color(0.2f, 0.2f, 0.25f, 0.85f);
            var button = root.AddComponent<Button>();

            var rarityFrame = new GameObject("RarityFrame").AddComponent<Image>();
            rarityFrame.rectTransform.SetParent(rect, false);
            rarityFrame.rectTransform.anchorMin = Vector2.zero;
            rarityFrame.rectTransform.anchorMax = Vector2.one;
            rarityFrame.rectTransform.offsetMin = Vector2.zero;
            rarityFrame.rectTransform.offsetMax = Vector2.zero;
            rarityFrame.color = new Color(1f, 0.8f, 0.2f, 0.5f);

            var icon = new GameObject("Icon").AddComponent<Image>();
            icon.rectTransform.SetParent(rect, false);
            icon.rectTransform.anchorMin = new Vector2(0.15f, 0.45f);
            icon.rectTransform.anchorMax = new Vector2(0.85f, 0.95f);
            icon.rectTransform.offsetMin = Vector2.zero;
            icon.rectTransform.offsetMax = Vector2.zero;
            icon.color = new Color(1f, 1f, 1f, 0.25f);

            var nameText = CreateText("Name", rect, "Card");
            nameText.rectTransform.anchorMin = new Vector2(0.1f, 0.28f);
            nameText.rectTransform.anchorMax = new Vector2(0.9f, 0.42f);
            nameText.alignment = TextAnchor.MiddleCenter;
            nameText.fontStyle = FontStyle.Bold;

            var costText = CreateText("Cost", rect, "0");
            costText.rectTransform.anchorMin = new Vector2(0.1f, 0.08f);
            costText.rectTransform.anchorMax = new Vector2(0.9f, 0.22f);
            costText.alignment = TextAnchor.MiddleCenter;

            var cardView = root.AddComponent<CardView>();
            var so = new SerializedObject(cardView);
            so.FindProperty("iconImage").objectReferenceValue = icon;
            so.FindProperty("nameText").objectReferenceValue = nameText;
            so.FindProperty("costText").objectReferenceValue = costText;
            so.FindProperty("button").objectReferenceValue = button;
            so.FindProperty("background").objectReferenceValue = background;
            so.FindProperty("rarityFrame").objectReferenceValue = rarityFrame;
            so.ApplyModifiedPropertiesWithoutUndo();

            return cardView;
        }

        private static AbilityButton CreateAbilityButtonTemplate(Transform parent)
        {
            var root = new GameObject("AbilityButtonTemplate");
            var rect = root.AddComponent<RectTransform>();
            rect.SetParent(parent, false);
            rect.sizeDelta = new Vector2(180f, 60f);
            root.SetActive(false);

            var background = root.AddComponent<Image>();
            background.color = new Color(0.15f, 0.25f, 0.35f, 0.85f);
            var button = root.AddComponent<Button>();

            var label = CreateText("Label", rect, "Ability");
            label.rectTransform.anchorMin = new Vector2(0.05f, 0.3f);
            label.rectTransform.anchorMax = new Vector2(0.7f, 0.9f);

            var dropdownGO = new GameObject("AbilityDropdown");
            var dropdownRect = dropdownGO.AddComponent<RectTransform>();
            dropdownRect.SetParent(rect, false);
            dropdownRect.anchorMin = new Vector2(0.7f, 0.1f);
            dropdownRect.anchorMax = new Vector2(0.95f, 0.9f);
            dropdownRect.offsetMin = Vector2.zero;
            dropdownRect.offsetMax = Vector2.zero;

            var dropdownImage = dropdownGO.AddComponent<Image>();
            dropdownImage.color = new Color(0f, 0f, 0f, 0.5f);

            var dropdown = dropdownGO.AddComponent<Dropdown>();
            dropdown.template = CreateDropdownTemplate(dropdownRect);

            var abilityButton = root.AddComponent<AbilityButton>();
            var so = new SerializedObject(abilityButton);
            so.FindProperty("label").objectReferenceValue = label;
            so.FindProperty("button").objectReferenceValue = button;
            so.FindProperty("abilityDropdown").objectReferenceValue = dropdown;
            so.ApplyModifiedPropertiesWithoutUndo();

            return abilityButton;
        }

        private static RectTransform CreateDropdownTemplate(RectTransform parent)
        {
            var template = new GameObject("Template").AddComponent<RectTransform>();
            template.SetParent(parent, false);
            template.anchorMin = new Vector2(0f, 0f);
            template.anchorMax = new Vector2(1f, 0f);
            template.pivot = new Vector2(0.5f, 1f);
            template.sizeDelta = new Vector2(0f, 150f);
            template.gameObject.SetActive(false);

            var templateImage = template.gameObject.AddComponent<Image>();
            templateImage.color = new Color(0f, 0f, 0f, 0.85f);

            var scrollRectGO = new GameObject("Viewport");
            var viewport = scrollRectGO.AddComponent<RectTransform>();
            viewport.SetParent(template, false);
            viewport.anchorMin = Vector2.zero;
            viewport.anchorMax = Vector2.one;
            viewport.offsetMin = Vector2.zero;
            viewport.offsetMax = Vector2.zero;

            var mask = scrollRectGO.AddComponent<Mask>();
            mask.showMaskGraphic = false;
            scrollRectGO.AddComponent<Image>().color = new Color(0f, 0f, 0f, 0.5f);

            var contentGO = new GameObject("Content");
            var contentRect = contentGO.AddComponent<RectTransform>();
            contentRect.SetParent(viewport, false);
            contentRect.anchorMin = new Vector2(0f, 1f);
            contentRect.anchorMax = new Vector2(1f, 1f);
            contentRect.pivot = new Vector2(0.5f, 1f);

            var layout = contentGO.AddComponent<VerticalLayoutGroup>();
            layout.childControlHeight = true;
            layout.childForceExpandHeight = false;
            layout.childForceExpandWidth = true;
            layout.spacing = 2f;

            template.gameObject.AddComponent<ScrollRect>().content = contentRect;

            var itemGO = new GameObject("Item");
            var itemRect = itemGO.AddComponent<RectTransform>();
            itemRect.SetParent(contentRect, false);
            itemRect.sizeDelta = new Vector2(0f, 24f);

            itemGO.AddComponent<Toggle>().targetGraphic = itemGO.AddComponent<Image>();
            CreateText("Item Label", itemRect, "Option").alignment = TextAnchor.MiddleLeft;

            return template;
        }

        private static bool EnsureExampleAssets(out ExampleAssets assets)
        {
            assets = new ExampleAssets
            {
                MatchSettings = Load<MatchSettings>($"{ExampleRoot}/Settings/DefaultMatchSettings.asset"),
                Waves = new[]
                {
                    Load<WaveDefinition>($"{ExampleRoot}/Waves/Wave1.asset"),
                    Load<WaveDefinition>($"{ExampleRoot}/Waves/Wave2.asset"),
                    Load<WaveDefinition>($"{ExampleRoot}/Waves/Wave3.asset")
                }.Where(w => w != null).ToArray(),
                DefenderDeck = Load<DeckDefinition>($"{ExampleRoot}/Decks/StarterDeck.asset"),
                AttackerDeck = Load<DeckDefinition>($"{ExampleRoot}/Decks/StarterDeck.asset"),
                AbilityCatalog = Load<AbilityCatalog>($"{ExampleRoot}/Abilities/AbilityCatalog.asset")
            };
            return assets.IsValid;
        }

        private static T Load<T>(string path) where T : Object
        {
            return AssetDatabase.LoadAssetAtPath<T>(path);
        }

        private readonly struct ExampleAssets
        {
            public MatchSettings MatchSettings { get; init; }
            public WaveDefinition[] Waves { get; init; }
            public DeckDefinition DefenderDeck { get; init; }
            public DeckDefinition AttackerDeck { get; init; }
            public AbilityCatalog AbilityCatalog { get; init; }
            public bool IsValid =>
                MatchSettings != null &&
                Waves != null && Waves.Length > 0 &&
                DefenderDeck != null &&
                AttackerDeck != null &&
                AbilityCatalog != null;
        }
    }
}
#endif
